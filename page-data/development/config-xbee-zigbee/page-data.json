{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/development/config-xbee-zigbee/","result":{"data":{"mdx":{"id":"a82ad0f9-5870-5855-b12a-9036734627c7","excerpt":"XBee Setup The ESP32 Microcontroller communicates with the Xbee over UART. The Xbee then will send any data it receives from the ESP32 over Zigbee to the otherâ€¦","fields":{"slug":"/development/config-xbee-zigbee/"},"frontmatter":{"title":"","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"xbee-setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#xbee-setup\",\n    \"aria-label\": \"xbee setup permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"XBee Setup\"), mdx(\"p\", null, \"The ESP32 Microcontroller communicates with the Xbee over UART. The Xbee then will send any data it receives from the ESP32 over Zigbee to the other Xbee device. The other Xbee device receives\\nthis data and outputs it over UART to another ESP32. This is called transparent mode, where any data that is sent over serial to the Xbee will be transmitted and any data received will be sent over\\nserial.\"), mdx(\"h2\", {\n    \"id\": \"setting-up-transparent-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#setting-up-transparent-mode\",\n    \"aria-label\": \"setting up transparent mode permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Setting up transparent mode\"), mdx(\"p\", null, \"There are a few different programs that can be used to program the Xbees:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Digi XCTU (Windows and Linux)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Digi XBee Mobile App (iOS and Android)\\nOne thing to note is that XCTU needs to be used to first enable bluetooth capability in order for the Mobile App to work.\\nParameters to configure include for each Xbee include:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DH: Destination Address High\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other XBee's SH: Serial Number High\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DL: Destination Address Low\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other XBee's SL: Serial Number Low\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CH: Channel Frequency\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Must be the same for both\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ID: Network ID\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Must be the same for both\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NI: Node Identifier\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- Unique to each XBee\\n\")), \"UART must be enabled and set to default pins as well as 115200 baud rate\\nTransparent mode must be enabled\\nOne Xbee must be set as the router and another as a sender.\\nThe firmware being used is the latest RF firmware that uses the Zigbee protocol\\nMore information can be found here:\\n\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.digi.com/resources/documentation/Digidocs/90001942-13/concepts/c_transparent_mode_detailed.htm?TocPath=XBee%20transparent%20mode%7CXBee%20transparent%20mode%20in%20detail%7C_____0\"\n  }), \"https://www.digi.com/resources/documentation/Digidocs/90001942-13/concepts/c_transparent_mode_detailed.htm?TocPath=XBee%20transparent%20mode%7CXBee%20transparent%20mode%20in%20detail%7C_____0\"))), mdx(\"p\", null, \"The XBees are programmed using AT commands over UART.\\nFuture plans for the ESP32 include automatically configuring the XBee's upon start up to ensure no changes have been made. As well as moving away from transparent mode to API mode. This will enable\\nthe quick changing of endpoints. \"), mdx(\"h2\", {\n    \"id\": \"profile-loading\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#profile-loading\",\n    \"aria-label\": \"profile loading permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Profile Loading\"), mdx(\"p\", null, \"The Digi XCTU software allows the user to load and save profiles that allow easy changing of the XBee. These files have been placed in xbee_config in the XBee branch of this repository. The names are lildatasender and notsobigdata. lildatasender attaches to the ESP32 with the sensors attached to it. notsobigdata is the receiver of this data and hooks up to the other ESP32.\"), mdx(\"h2\", {\n    \"id\": \"reading-data-from-xbee\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#reading-data-from-xbee\",\n    \"aria-label\": \"reading data from xbee permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Reading Data from XBee\"), mdx(\"p\", null, \"The ESP32 is collecting the data from the XBee. It can be read by using Putty or another serial communication program in windows or linux.\\nThe baud rate is 115200,\\nFor more in depth details, visit:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/establish-serial-connection.html\"\n  }), \"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/establish-serial-connection.html\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"XBee Setup"},{"depth":2,"value":"Setting up transparent mode"},{"depth":2,"value":"Profile Loading"},{"depth":2,"value":"Reading Data from XBee"}]}},"pageContext":{"slug":"/development/config-xbee-zigbee/","prev":{"label":"Adding Sensors","link":"/development/adding-sensors"},"next":{"label":"Hardware Setup","link":"/development/hardware-setup"},"githubEditUrl":"https://github.com/LilDataMonster/loincloth/tree/master/docs/src/docs/development/config-xbee-zigbee.mdx"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}